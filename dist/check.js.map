{"version":3,"file":"check.js","sourceRoot":"","sources":["../src/check.ts"],"names":[],"mappings":";;;;AAAA,+DAA0B;AAC1B,2BAA2C;AAC3C,+BAA4B;AAE5B,mCAAqC;AACrC,iCAA8B;AAE9B,wDAAwD;AACxD,SAAgB,UAAU,CAAE,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAU;IACtD,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC;IAEzD,IAAI,CAAC,GAAG;QACN,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IAEnC,QAAQ,IAAI,EAAE;QACZ,KAAK,WAAI,CAAC,GAAG;YACX,YAAY,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YACzB,MAAM;QACR,OAAO,CAAC,CAAC,MAAM;KAChB;AACH,CAAC;AAZD,gCAYC;AAED,SAAS,YAAY,CAAC,WAAmB,EAAE,SAAiB;IAC1D,IAAI,GAAG,GAAG,GAAG,WAAW,SAAS,CAAC;IAElC,GAAG,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;IACnC,OAAO,CAAC,GAAG,CAAC,gBAAgB,GAAG,EAAE,CAAC,CAAC;IAEnC,IAAA,cAAS,EAAC,GAAG,CAAC,CAAC;IACf,IAAA,SAAG,EAAC,2DAA2D,SAAS,MAAM,GAAG,GAAG,CAAC,CAAC;IAEtF,IAAI,CAAC,IAAA,kBAAU,EAAC,WAAW,EAAE,GAAG,CAAC,EAAE;QACjC,OAAO,CAAC,GAAG,CAAC,eAAK,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC,CAAC;QAC3D,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACjB;IAED,IAAA,SAAG,EAAC,WAAW,GAAG,GAAG,CAAC,CAAC;IACvB,IAAA,SAAG,EAAC,WAAW,GAAG,GAAG,CAAC,CAAC;IAEvB,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;AAC/B,CAAC;AAED,SAAS,uBAAuB,CAAC,GAAW,EAAE,CAAC,GAAG,CAAC;IACjD,MAAM,UAAU,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAE1C,IAAI,IAAA,eAAU,EAAC,UAAU,CAAC,EAAE;QAC1B,IAAI;YACF,IAAA,SAAG,EAAC,WAAW,UAAU,GAAG,CAAC,CAAC;YAC9B,IAAA,SAAG,EAAC,WAAW,UAAU,GAAG,CAAC,CAAC;YAE9B,OAAO,UAAU,CAAC;SACnB;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,uBAAuB,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;SAC5C;KACF;IAED,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["import chalk from \"chalk\";\nimport { existsSync, mkdirSync } from \"fs\";\nimport { cmd } from \"./cmd\";\nimport { Config } from \"./Config\";\nimport { isEqualDir } from \"./paths\";\nimport { Type } from \"./type\";\n\n// eslint-disable-next-line import/prefer-default-export\nexport function checkAfter( { type, input, out }: Config) {\n  console.log(chalk.blue(\"Checking backup integrity ...\"));\n\n  if (!out)\n    throw new Error(\"out undefined\");\n\n  switch (type) {\n    case Type.ISO:\n      integrityISO(input, out);\n      break;\n    default: break;\n  }\n}\n\nfunction integrityISO(inputFolder: string, outputISO: string) {\n  let tmp = `${inputFolder}_bkptmp`;\n\n  tmp = umountAndRemoveIfExists(tmp);\n  console.log(`Temp folder: ${tmp}`);\n\n  mkdirSync(tmp);\n  cmd(`sudo mount -t iso9660 -o loop,ro,map=off,check=relaxed \"${outputISO}\" \"${tmp}\"`);\n\n  if (!isEqualDir(inputFolder, tmp)) {\n    console.log(chalk.red(\"ISO is not equal as base folder!\"));\n    process.exit(1);\n  }\n\n  cmd(`umount \"${tmp}\"`);\n  cmd(`rm -rf \"${tmp}\"`);\n\n  console.log(\"Integrity ok!\");\n}\n\nfunction umountAndRemoveIfExists(tmp: string, n = 1): string {\n  const tmpWithNum = tmp + (n > 1 ? n : \"\");\n\n  if (existsSync(tmpWithNum)) {\n    try {\n      cmd(`umount \"${tmpWithNum}\"`);\n      cmd(`rm -rf \"${tmpWithNum}\"`);\n\n      return tmpWithNum;\n    } catch (e) {\n      return umountAndRemoveIfExists(tmp, n + 1);\n    }\n  }\n\n  return tmpWithNum;\n}\n"]}